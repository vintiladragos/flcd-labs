a.Special symbols, representing:
/// Review of Dan Truta
- operators:
	a) relational: + - * /
	b) arithmetic: < <= == != >= >
	c) assignment: =

- separators:
	[ ] { } ( ) : ; space , newline

- reserved words:
	array bool int char
	elif if else do end
	gets puts cuts
	nil and break not or for false true while in

b.identifiers
- a sequence of letters, digits or character "_", such that the first character is a letter or the character "_";

the rule is:
	<letter> ::= A|B|...|Z|a|b|...|z
	<digit> ::= 0|1|...|9
	<nonzero_digit> ::= 1|2|...|9

	<zero_possible_prefix_int> ::= <digit>|<digit zero_possible_prefix_int>
	<positive_unsigned_int> ::= <nonzero_digit><zero_possible_prefix_int>
	<nonzero_signed_int> ::= +<positive_unsigned_int>|-<positive_unsigned_int>

	<starting_of_identifier> ::= <letter>|_
	<available_characters> :: <letter>|<digit>|_
	<string> ::= <available_characters>|<available_characters><string>
	<identifier> ::= <starting_of_identifier><string> # This does not allow identifiers of a single character. I would recommend the definition: <identifier> ::= <starting_of_identifier>|<starting_of_identifier><string>

c.constants

1.integer - rule: 0 has no sign, no number can start by 0
	<int_constant> ::= 0|<nonzero_signed_int>

2.character
	<character_constant> ::= '<letter>'|'<digit>'

3.string
	<string_constant> ::= "<string>"